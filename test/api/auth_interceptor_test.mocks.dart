// Mocks generated by Mockito 5.4.2 from annotations
// in switchbot_api_dio/test/api/auth_interceptor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:switchbot_api_dio/src/auth/generate_sign_use_case.dart' as _i4;
import 'package:switchbot_api_dio/src/auth/get_nonce_use_case.dart' as _i2;
import 'package:switchbot_api_dio/src/auth/get_time_use_case.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetNonceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNonceUseCase extends _i1.Mock implements _i2.GetNonceUseCase {
  MockGetNonceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [GetTimeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTimeUseCase extends _i1.Mock implements _i3.GetTimeUseCase {
  MockGetTimeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [GenerateSignUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenerateSignUseCase extends _i1.Mock
    implements _i4.GenerateSignUseCase {
  MockGenerateSignUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String call({
    required int? timestamp,
    required String? nonce,
    required String? userToken,
    required String? userSecret,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #timestamp: timestamp,
            #nonce: nonce,
            #userToken: userToken,
            #userSecret: userSecret,
          },
        ),
        returnValue: '',
      ) as String);
}
